1. 
- Текстовые файлы хранят данные в виде читаемых символов, используя стандартные кодировки (например, UTF-8, ASCII). Эти файлы можно открыть и прочитать в текстовом редакторе.
- Двоичные файлы содержат данные в двоичном формате, который может представлять любой тип данных, включая изображения, аудио и другие типы, и они не предназначены для чтения человеком.
- Да, текстовый файл можно рассматривать как частный случай двоичного файла, так как он также является набором байтов, но с определённой интерпретацией (текст).

2. 
Принцип сэндвича подразумевает, что данные, которые вы читаете или записываете в файл, должны быть упакованы или распакованы таким образом, чтобы поддерживать структуру данных. Например, если вы записываете объект, вы сначала сериализуете его в определённый формат, а затем читаете его, распаковывая обратно. Это гарантирует целостность и согласованность данных.

3. 
Файл блокируется, чтобы предотвратить одновременный доступ к нему из нескольких программ. Это нужно для избежания возможного повреждения данных, конфликтов или потерь информации, когда несколько программ пытаются читать и записывать в файл одновременно.

4. 
Рекомендуется вручную закрывать файлы, чтобы гарантированно освободить ресурсы (например, дескрипторы файлов) и завершить все операции записи или чтения. Это важно в ситуациях, когда вы работаете с ограниченным количеством ресурсов, или если ваша программа продолжает использовать память и ресурсы, и вы хотите избежать утечек памяти.

5. 
Файловая переменная — это специальная переменная, которая хранит информацию о состоянии открытого файла (например, указатель на текущую позицию в файле, режим доступа и пр.). Использование файла переменной позволяет управлять доступом к файлу, выполнять операции с ним, не полагаясь только на имя файла.

6. 
Одна и та же файловая переменная может быть использована для работы с несколькими файлами, если они были открыты и закрыты последовательно. Однако, если файлы открыты одновременно (например, в разных режимах), то использование одной файловой переменной приведёт к путанице, и лучше создать отдельные переменные для каждого файла.

7. 
Последовательный доступ к данным означает, что данные считываются или записываются последовательно, от начала до конца файла. Это подразумевает, что вы не можете перейти к произвольной позиции в файле, пока не пройдёте всю его часть до этой позиции.

8. 
Чтобы начать чтение данных с начала файла, нужно переместить курсор файла в его начало, используя функцию, которая осуществляет сброс указателя, например, seek(0) в языках программирования, поддерживающих такую операцию.

9. 
Обычно используют специальную переменную состояния или метод для проверки конца файла, например, в Python можно использовать метод read() и проверять на пустую строку, а в C/C++ использовать feof().

10. 
Нужно знать максимальное количество данных в файле, когда вы планируете выделять фиксированное количество памяти для работы с данными или нужно управлять массивами. В противном случае, если размер данных неизвестен, можно воспользоваться динамическими структурами (списки, массивы переменной длины), если язык программирования это поддерживает.

11.
Нужно открывать несколько файлов одновременно, если ваша программа должна работать с несколькими данными параллельно (например, чтение данных из одного файла и запись в другой) или если данные логически связаны и требуется взаимодействие между ними.

---

 Задачи

1. 
def calculate_average(input_filename, output_filename):
    with open(input_filename, 'r') as infile:
        numbers = [int(line.strip()) for line in infile]
        
    average = sum(numbers) / len(numbers)
    
    with open(output_filename, 'w') as outfile:
        outfile.write(f"Среднее арифметическое: {average}\n")


2.
def find_min_max_even(input_filename, output_filename):
    min_even = float('inf')
    max_even = float('-inf')
    
    with open(input_filename, 'r') as infile:
        for line in infile:
            num = int(line.strip())
            if num > 0 and num % 2 == 0:
                if num < min_even:
                    min_even = num
                if num > max_even:
                    max_even = num
    
    result = ""
    if min_even == float('inf'):
        result = "Чётные положительные числа отсутствуют."
    else:
        result = f"Минимальное четное число: {min_even}\nМаксимальное четное число: {max_even}"
    
    with open(output_filename, 'w') as outfile:
        outfile.write(result + "\n")


3.
def longest_sequence_of_same_numbers(input_filename, output_filename):
    with open(input_filename, 'r') as infile:
        numbers = [int(line.strip()) for line in infile]
        
    max_length = 1
    current_length = 1
    
    for i in range(1, len(numbers)):
        if numbers[i] == numbers[i - 1]:
            current_length += 1
        else:
            max_length = max(max_length, current_length)
            current_length = 1
            
    max_length = max(max_length, current_length)  # To account for the last sequence
    
    with open(output_filename, 'w') as outfile:
        outfile.write(f"Длина самой длинной цепочки: {max_length}\n")


4.
def sort_by_last_digit(input_filename, output_filename):
    with open(input_filename, 'r') as infile:
        numbers = [int(line.strip()) for line in infile]

    numbers.sort(key=lambda x: x % 10)

    with open(output_filename, 'w') as outfile:
        for number in numbers:
            outfile.write(f"{number}\n")

5.
def sum_of_digits(n):
    return sum(int(digit) for digit in str(n))

def sort_by_digit_sum(input_filename, output_filename):
    with open(input_filename, 'r') as infile:
        numbers = [int(line.strip()) for line in infile]

    numbers.sort(key=sum_of_digits)

    with open(output_filename, 'w') as outfile:
        for number in numbers:
            outfile.write(f"{number}\n")

6.
def merge_sorted_files(file1, file2, output_file):
    with open(file1, 'r') as f1, open(file2, 'r') as f2:
        numbers1 = [int(line.strip()) for line in f1]
        numbers2 = [int(line.strip()) for line in f2]

    merged_numbers = sorted(numbers1 + numbers2)

    with open(output_file, 'w') as outfile:
        for number in merged_numbers:
            outfile.write(f"{number}\n")

7.
def handle_dog_data(input_filename, output_filename):
    with open(input_filename, 'r') as infile, open(output_filename, 'w') as outfile:
        for line in infile:
            try:
                # Пытайтесь обработать данные собаки
                name, age = line.strip().split(",")
                age = int(age)  # Предполагаем, возраст - это число
                if age < 0:
                    raise ValueError("Возраст не может быть отрицательным.")
                outfile.write(f"{name} - {age} лет\n")
            except ValueError as e:
                print(f"Ошибка в строке '{line}': {e}")
            except Exception as e:
                print(f"Непредвиденная ошибка: {e}")

8.
def remove_fillers(input_filename, output_filename):
    with open(input_filename, 'r') as infile:
        text = infile.read()

    filtered_text = ' '.join(word for word in text.split() if word != "короче")

    with open(output_filename, 'w') as outfile:
        outfile.write(filtered_text.strip() + "\n")

9.
def count_words_in_file(input_filename):
    with open(input_filename, 'r') as infile:
        text = infile.read()

    word_count = len(text.split())
    print(f"Количество слов в файле: {word_count}")

10.
def filter_lines_starting_with_a(input_filename, output_filename):
    with open(input_filename, 'r') as infile, open(output_filename, 'w') as outfile:
        for line in infile:
            if any(word.startswith('А') for word in line.split()):
                outfile.write(line)


11. 
def filter_words_starting_with_a(input_filename, output_filename):
    with open(input_filename, 'r', encoding='utf-8') as infile, open(output_filename, 'w', encoding='utf-8') as outfile:
        for line in infile:
            words = line.split()
            for word in words:
                if word.startswith('А') or word.startswith('а'):
                    outfile.write(word + "\n")


12.

def replace_word(input_filename, output_filename, old_word, new_word):
    with open(input_filename, 'r', encoding='utf-8') as infile:
        text = infile.read()

    updated_text = text.replace(old_word, new_word)

    with open(output_filename, 'w', encoding='utf-8') as outfile:
        outfile.write(updated_text)

# Пример использования
replace_word('input.txt', 'output_replaced.txt', 'паровоз', 'пароход')


 13. 
def filter_students_high_scores(input_filename, output_filename):
    with open(input_filename, 'r', encoding='utf-8') as infile, open(output_filename, 'w', encoding='utf-8') as outfile:
        for line in infile:
            parts = line.strip().split()
            if len(parts) == 3:  # Убедимся, что строка имеет правильный формат
                surname = parts[0]
                name = parts[1]
                score = int(parts[2])
                if score > 80:
                    outfile.write(f"{surname} {name}\n")

14. 
def filter_students_with_numbers(input_filename, output_filename):
    with open(input_filename, 'r', encoding='utf-8') as infile, open(output_filename, 'w', encoding='utf-8') as outfile:
        count = 1
        for line in infile:
            parts = line.strip().split()
            if len(parts) == 3:
                surname = parts[0]
                name = parts[1]
                score = int(parts[2])
                if score > 80:
                    outfile.write(f"{count}) {surname} {name}\n")
                    count += 1


15.
def shorten_names(input_filename, output_filename):
    with open(input_filename, 'r', encoding='utf-8') as infile, open(output_filename, 'w', encoding='utf-8') as outfile:
        count = 1
        for line in infile:
            parts = line.strip().split()
            if len(parts) == 3:
                surname = parts[0]
                name = parts[1]
                score = int(parts[2])
                if score > 80:
                    shortened_name = f"{name[0]}."
                    outfile.write(f"{count}) {shortened_name} {surname}\n")
                    count += 1


16.

def sort_by_surname(input_filename, output_filename):
    students = []

    with open(input_filename, 'r', encoding='utf-8') as infile:
        for line in infile:
            students.append(line.strip())

    sorted_students = sorted(students, key=lambda line: line.split()[-1])  # Учитываем только фамилию для сортировки

    with open(output_filename, 'w', encoding='utf-8') as outfile:
        for student in sorted_students:
            outfile.write(student + "\n")


 17. 

def sort_by_score_descending(input_filename, output_filename):
    students = []

    with open(input_filename, 'r', encoding='utf-8') as infile:
        for line in infile:
            parts = line.strip().split()
            if len(parts) == 3:
                surname = parts[0]
                name = parts[1]
                score = int(parts[2])
                students.append((surname, name, score))

    sorted_students = sorted(students, key=lambda student: student[2], reverse=True)

    with open(output_filename, 'w', encoding='utf-8') as outfile:
        for count, (surname, name, score) in enumerate(sorted_students, start=1):
            outfile.write(f"{count}) {surname} {name} - {score}\n")
