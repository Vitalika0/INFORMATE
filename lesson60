1) Функция — это блок кода, который принимает входные параметры, выполняет определенные операции и возвращает значение. Процедура, в отличие от функции, не возвращает значения, а просто выполняет действия. Основное различие состоит в том, что функции возвращают результат, а процедуры — нет.

2) В школьном алгоритмическом языке функции часто оформляются просто с указанием их названия и входных параметров, без строгого определения типов. Например: Функция Максимум(а, b) Если а > b тогда Вернуть а Иначе Вернуть b КонецФункции

В Паскале функции имеют строгую структуру с указанием типа возвращаемого значения и определением типов параметров: function Максимум(a, b: Integer): Integer; begin if a > b then Максимум := a else Максимум := b; end;

 Приведите пример. Чтобы определить значение, возвращаемое функцией, следует изучить ее тело и выйти на оператор, который возвращает соответствующее значение. Например: function Сумма(a, b: Integer): Integer; begin Сумма := a + b; end;

В данном случае функция Сумма возвращает сумму двух целых чисел.

Какие функции называются логическими? Зачем они нужны? Логические функции — это функции, которые возвращают булевы значения (истина или ложь). Они часто используются для проверок и условий, например, для определения, является ли число простым, или для работы с условиями в логических выражениях.

Сообщения
а) Функции в языке Си Функции в языке Си определяются с указанием типа возвращаемого значения, имени функции и параметров. Синтаксис выглядит следующим образом: return_type function_name(parameter_list) { // тело функции }

Пример функции, вычисляющей сумму двух чисел: int sum(int a, int b) { return a + b; }

б) Функции в языке Python В Python функции определяются с использованием ключевого слова def и не требуют указания типов параметров. Пример функции, вычисляющей произведение двух чисел: def multiply(a, b): return a * b

Задачи
Напишите функцию, которая вычисляет максимальное из трёх чисел. def max_of_three(a, b, c): return max(a, b, c)

Напишите функцию, которая вычисляет сразу максимальное и минимальное из трёх чисел. def min_max_of_three(a, b, c): return (min(a, b, c), max(a, b, c))

Напишите функцию, которая вычисляет количество цифр числа. def count_digits(n): return len(str(abs(n))) # abs для обработки отрицательных чисел

Напишите функцию, которая вычисляет наибольший общий делитель двух чисел. def gcd(a, b): while b: a, b = b, a % b return a

Напишите функцию, которая вычисляет наименьшее общее кратное двух чисел. def lcm(a, b): return abs(a * b) // gcd(a, b)

Напишите функцию, которая «разворачивает» десятичную запись числа. def reverse_number(n): return int(str(n)[::-1])

Напишите функцию, которая моделирует бросание двух игральных кубиков. import random

def throw_dice(): return (random.randint(1, 6), random.randint(1, 6))

Напишите функцию, которая вычисляет факториал натурального числа М. def factorial(m): if m == 0: return 1 else: return m * factorial(m - 1)

Напишите функцию, которая вычисляет N-е число Фибоначчи. def fibonacci(n): if n <= 0: return 0 elif n == 1: return 1 else: return fibonacci(n - 1) + fibonacci(n - 2)

Напишите функцию, которая находит все пары дружественных чисел. def sum_of_divisors(n): return sum(i for i in range(1, n) if n % i == 0) def amicable_numbers(limit): pairs = [] for i in range(1, limit): j = sum_of_divisors(i) if j < limit and i != j and sum_of_divisors(j) == i: pairs.append((i, j)) return pairs

Напишите программу, которая находит все числа на отрезке 0, N, сумма цифр которых не меняется при умножении на 2, 3, 4, 5, 6, 7, 8 и 9. def digit_sum(n): return sum(int(digit) for digit in str(n))

def find_same_digit_sum(N): result = [] for i in range(N + 1): if all(digit_sum(i) == digit_sum(i * j) for j in range(2, 10)): result.append(i) return result

Напишите логическую функцию, которая определяет, является ли число совершенным. def is_perfect(n): return n == sum(i for i in range(1, n) if n % i == 0)

Напишите логическую функцию, которая определяет, является ли число гиперпростым. def is_prime(num): if num < 2: return False for i in range(2, int(num**0.5) + 1): if num % i == 0: return False return True

def is_hyperprime(n): str_n = str(n) # Проверяем все возможные числа, которые можно получить, удалив цифры for i in range(len(str_n)): for j in range(i+1, len(str_n) + 1): if not is_prime(int(str_n[i:j])): return False return True

