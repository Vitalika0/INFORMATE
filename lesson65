1. 
Алгоритм поиска называется двоичным, потому что он работает на отсортированном массиве, разделяя его на две половины. На каждом шаге алгоритм сравнивает искомый элемент с элементом в центре массива и в зависимости от результата сравнения отбрасывает половину массива, где искомый элемент не может находиться. Таким образом, процесс поиска происходит за логарифмическое количество шагов, что делает его очень эффективным для больших массивов.

2. 
Количество шагов при двоичном поиске можно подсчитать по формуле log2(n), где n — количество элементов в массиве. Это означает, что для массива из 32 элементов, максимальное количество шагов будет равно log2(32), что равно 5. Чем больше элементов в массиве, тем больше шагов потребуется, но этот рост будет значительно меньшим по сравнению с линейным поиском, который требует наихудшего случая n шагов.

Задачи

1. 
def sort_and_find(arr, target):
    arr.sort(reverse=True)
    return [x for x in arr if x == target]

arr = [34, 23, 12, 45, 56, 78, 34, 23]
target = 34
print(sort_and_find(arr, target))

2.
import random

def average_binary_search_steps():
    arr = sorted(random.sample(range(101), 32))
    total_steps = 0
    for _ in range(1000):
        target = random.randint(0, 100)
        left, right = 0, len(arr) - 1
        steps = 0
        while left <= right:
            steps += 1
            mid = (left + right) // 2
            if arr[mid] == target:
                break
            elif arr[mid] < target:
                right = mid - 1
            else:
                left = mid + 1
        total_steps += steps
    return total_steps / 1000

print(average_binary_search_steps())