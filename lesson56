
1) Некоторые типы данных: • Целочисленные. Используются для хранения целых чисел без дробной части. Могут быть знаковыми (могут хранить отрицательные числа) и беззнаковыми (только положительные). • Дробные. Дробные или вещественные числа используются для хранения чисел с плавающей запятой. • Символьные. Используются для хранения символов, таких как буквы, цифры и знаки препинания. • Логические. Используются для хранения значений истинности, которые могут быть либо истинными, либо ложными. • Идентификационные. Используются для обозначения уникальных значений, таких как ключи баз данных.

2) Во многих языках программирования есть несколько целочисленных и вещественных типов данных, потому что в современных компьютерах целые и вещественные числа представляются по-разному: • Целое число может быть представлено абсолютно точно, а вещественное — неизбежно с некоторой конечной погрешностью, которая определяется свойствами транслятора. • Набор операций над целыми и вещественными числами различается. Например, операции сложения целых и вещественных чисел представляются разными машинными командами. • Реализация операций над вещественными числами сложнее с аппаратной точки зрения, поэтому в ряде архитектур вещественные числа вообще могут отсутствовать.

3) Символьная переменная отличается от строковой тем, что символьная всегда содержит ровно один символ, а строковая содержит строку из нескольких символов.

4) В языке программирования логические переменные - это переменные типа bool (от англ. boolean — логический), а значения, которые принимают данные переменные - это true (от англ. true — правда) и false (от англ. false — ложь). Название bool было выбрано в честь знаменитого математика. Джорджа Буля, который создал алгебру логики или булевскую алгебру Использование в циклах. Общая память, если 1 Кб содержит 1024x8=8192 бита или логические переменные. В случае других запоминающих устройств, таких как энергонезависимые запоминающие устройства, такие как магнитные ленты и диски, данные хранятся в виде двоичных битов или логических переменных, каждая из которых может принимать значение 1 или 0. Разные запоминающие устройства имеют разные физические механизмы хранения битов, но логически все они хранят информацию в виде набора двоичных битов или булевых переменных.

5) Приоритет операций — формальное свойство оператора, влияющее на очередность его выполнения в выражении с несколькими различными операторами при отсутствии явного указания на порядок их вычисления (с помощью скобок). Назначение приоритета операций в том, что он определяет порядок вычисления операций в выражении. Например, операцию умножения обычно наделяют большим приоритетом, чем операцию сложения, поэтому в выражении x + y ⋅ z сначала будет получено произведение y и z, а потом уже сумма.

6) Если операции имеют одинаковый приоритет, то они выполняются по очереди слева направо.

7) В выражениях скобки используются для следующих целей: • Указание порядка действий. Выражение, которое стоит в скобках, вычисляется первым, за ним следует вычисление всех остальных. • Выделение отрицательных чисел. Скобками выделяют отрицательные числа в выражениях, чтобы избежать путаницы. • Обозначение действий, которые необходимо совершить над выражением. Под действием здесь имеются в виду возведение в степень, взятие производной или вычисление подинтегрального выражения. • Запись координат точек. Например, запись «точка, с координатами (1; 2)» обозначает, что по оси абсцисс координата точки равна единице, а по оси ординат — двум.

8) Если в выражение входят переменные разных типов, происходит преобразование к одному типу. Компилятор преобразует все операнды «вверх», к типу большего операнда. Тип результата вычисления такого выражения будет соответствовать более «мощному» типу операнда. Например, результат сложения целых и вещественных переменных будет иметь тип переменной вещественного типа, то есть тип float. Перед началом вычисления тип переменной целого типа преобразуется в тип float, а затем уже происходит сложение.

9) Операции div и mod — это арифметические операторы целочисленного деления в программировании. Оператор div используется для получения целой части частного в результате деления. Дробная часть не выводится. Например, 14 div 3 = 4. Оператор mod применяется для получения остатка в результате деления. Например, 14 mod 3 = 2. Операции div и mod не определены для вещественных чисел, потому что div отвечает за целочисленное деление чисел, то есть когда одно целое число делится на другое целое. А mod находит остаток при делении целых чисел.

10) Проблема вычисления остатка в некоторых языках программирования заключается в том, что для отрицательного делимого и положительного делителя оператор вычисления остатка даёт отрицательный результат. Например, -17 % 5 == -2. Это может вызвать проблемы, если не знать об этом при написании программы. Например, при использовании Java-модуля оператор % даёт -3 в ответ, а не 1, как в случае с -7 % 4 = -3. Чтобы решить проблему, в некоторых языках программирования, например Python, оператор % возвращает остаток с тем же знаком, что и у делителя. Также можно использовать встроенную функцию, которая позволяет получить и частное, и остаток в одном вызове. Ещё одна причина, по которой остаток на аппаратном уровне может быть отрицательным в случае отрицательного делимого, — если бы процессор вычислял правильный остаток, компьютер бы сильно тормозил.

11) Возвести число в степень - это умножить число само на себя столько раз, в какую степень нужно его возвести. То есть чтобы, например, три возвести в пятую степень, нужно число 3 умножить само на себя 5 раз.

12) Некоторые стандартные математические функции: • abs(x) — абсолютное значение х; • exp(x) — значение е в степени х; • sin(x) и cos(x) — значение синуса или косинуса х, х должен задаваться в радианах; • arctan(x) — арктангенс х; • ln(x) — натуральный логарифм х (х>0); • sqr(x) — квадрат х; • sqrt(x) — квадратный корень из х; • random(x) — случайное число из диапазона 0<=...< x; • Pi — значение пи; • odd(x) — значение функции true, если х нечётен, и false в противном случае. Аргумент тригонометрических функций в тригонометрии принято измерять в угловых градусах или в радианах. Чаще используется радианное измерение, при этом обозначение «радиан» опускается и тригонометрические функции считаются функциями числового аргумента.

13) Round()

14) Главных распределений два: равномерное, с графиком в виде горизонтальной линии, и нормальное, с графиком-колоколом (его ещё называют гауссианой). Основная Python-библиотека для генерации случайных чисел называется random Большинство случайных чисел в программировании — не случайные, а псевдослучайные Случайные числа имеют жизненноважное значение для обеспечениясправедливого присуждения призов влотереях. Самый простой способ определить победителя — присвоить каждому участнику уникальный номер, а затем использовать генератор случайных чисел, чтобы выбрать одно из этих чисел и получить приз.

15) Получить естественное случайное числоможно, например, используя разные источники энтропии: время, температуру, шум, распады ядер каких-нибудь элементов. Однако сбор энтропии — процесс нетривиальный и занимает много времени, поэтому на практике часто используют более лёгкие алгоритмы генерации псевдослучайных чисел.

16) Отличие псевдослучайного числа отслучайного состоит в том, что оно получено путём вычислений по некоторому алгоритму, как следствие, для генераторов псевдослучайных чиселвозможно предсказать, какое число будет сгенерировано.

17) Для получения псевдослучайных чисел можно использовать следующие функции, например, в языке программирования Python: • random.random(). Возвращает псевдослучайное число от 0.0 до 1.0. 3 • random.seed(параметр). Настраивает генератор случайных чисел на новую последовательность. По умолчанию используется системное время. Если значение параметра будет одиноким, то генерируется одинокое число. • random.uniform(начало, конец). Возвращает псевдослучайное вещественное число в диапазоне от начала до конца. • random.randint(начало, конец). Возвращает псевдослучайное целое число в диапазоне от начала до конца. • random.choince(последовательность). Возвращает случайный элемент из любой последовательности (строки, списка, кортежа). • random.randrange(начало, конец, шаг). Возвращает случайно выбранное число из последовательности. • random.shuffle(список). Перемешивает последовательность (изменяется сама последовательность). Поэтому функция не работает для неизменяемых объектов.

ЗАДАНИЯ

1) Диапазон значений для вещественных типов данных может сильно различаться в зависимости от языка программирования и архитектуры. Например, в языке Си диапазон для типа float обычно составляет от -3.4E+38 до 3.4E+38, а для double — от -1.7E+308 до 1.7E+308.

2) Программа для нахождения суммы, произведения и среднего арифметического трех целых чисел на Паскале: program Calculate;
var a, b, c: integer; sum, product, average: real; begin writeln('Введите три целых числа:'); readln(a, b, c);

sum := a + b + c; product := a * b * c; average := sum / 3;

writeln(a, ' + ', b, ' + ', c, ' = ', sum:0:0); writeln(a, ' * ', b, ' * ', c, ' = ', product:0:0); writeln('Среднее арифметическое = ', average:0:6); end. 3) Программа для вычисления площади круга и длины окружности: program CircleCalculator; const Pi = 3.14159265359; var radius: real; area, circumference: real; begin writeln('Введите радиус круга:'); readln(radius); area := Pi * radius * radius; circumference := 2 * Pi * radius;

writeln('Площадь круга: ', area:0:2); writeln('Длина окружности: ', circumference:0:2); end. 4) Программа, которая меняет местами значения двух переменных: program SwapVariables; var x, y, temp: integer; begin writeln('Введите два целых числа:'); readln(x, y); temp := x; x := y; y := temp;

writeln('После обмена: x = ', x, ', y = ', y); end. 5) Решение для обмена значениями без дополнительных переменных: program SwapWithoutTemp; var x, y: integer; begin writeln('Введите два целых числа:'); readln(x, y); x := x + y; y := x - y; x := x - y;

writeln('После обмена: x = ', x, ', y = ', y); end. 6) Программа, чтобы возвести число в степень 10: program PowerOfTen; var x, i, result: integer; begin writeln('Введите число:'); readln(x); result := 1; for i := 1 to 10 do result := result * x;

writeln(x, ' в степени 10 = ', result); end.

При вводе большого числа, например, 78, может возникнуть переполнение, так как результат превысит максимально допустимое значение для целого типа. 7) Вычисления для вещественной переменной с a=2 и b=3: var a, b, c: real; begin a := 2; b := 3; c := a + 1/3; // а writeln(c);

c := a + 4/2*3 + 6; // б writeln(c);

c := (a + 4)/2*3; // в writeln(c);

c := (a + 4)/(b + 3) * a; // г writeln(c); end. 8) Вычисление значения целочисленной переменной с a=26 и b=6: var a, b, c: integer; begin a := 26; b := 6; c := (a mod b) + b; // a) writeln(c);

c := (a div b) + a; // b) writeln(c);

// Другие выражения можно добавить аналогично end. 9) Для вычислений с a=-22 и b=-4 результаты могут отличаться в зависимости от обработки отрицательных чисел в разных языках. В Паскале операции div и mod могут дать неожиданные результаты. 10) Программа для разбивки трехзначного числа на цифры: program SplitNumber; var num, hundreds, tens, units: integer; begin writeln('Введите трехзначное число:'); readln(num);

hundreds := num div 100; tens := (num div 10) mod 10; units := num mod 10;

writeln(hundreds, ',', tens, ',', units); end. 11) Программа для вычисления расстояния между двумя точками на числовой оси: program DistanceBetweenPoints; var point1, point2, distance: integer; begin writeln('Введите координаты двух точек:'); readln(point1, point2); if point1 > point2 then distance := point1 - point2 else distance := point2 - point1;

writeln('Расстояние между точками: ', distance); end. 12) Программа для вычисления произведения двух вещественных чисел: program MultiplyRealNumbers; var x, y, result: real; begin writeln('Введите два вещественных числа:'); readln(x, y); result := x * y; writeln('Произведение: ', result:0:2); end. 13) Программа для округления вещественного числа: program RoundNumber; var number: real; writeln('Введите вещественное число:'); readln(number); writeln('Округленное число: ', round(number)); end. 14) Программа для вывода 5 случайных целых чисел на отрезке a, b: program RandomNumbers; var a, b, i, randomNum: 15) Программа для моделирования бросания двух кубиков: program DiceRoll; var dice1, dice2, sum: integer; begin Randomize; dice1 := Random(6) + 1; // Кубик 1 dice2 := Random(6) + 1; // Кубик 2 sum := dice1 + dice2; 16) Программа для случайного выбора дежурных: pascal program RandomDuties; var N, student1, student2: integer; begin writeln('Введите количество учеников в классе (N):'); readln(N); if N < 2 then begin writeln('Количество учеников должно быть не менее 2.'); exit; end;

Randomize;

student1 := Random(N) + 1; // Случайное число от 1 до N student2 := Random(N) + 1; // Случайное число от 1 до N

while student2 = student1 do // Убедимся, что дежурные разные student2 := Random(N) + 1;

writeln('Дежурные: ', student1, ' и ', student2); end.

Проблема: Возможная проблема заключается в том, что два случайных числа могут совпадать, поэтому необходимо убедиться, что дежурные не являются одинаковыми. 17) Программа для генерации случайных вещественных чисел в полуинтервале [а, b): pascal program RandomRealNumbers; var a, b, randomReal: real; i: integer; begin writeln('Введите два вещественных числа (a < b):'); readln(a, b); if a >= b then begin writeln('Ошибка: a должно быть меньше b.'); exit; end;

Randomize; for i := 1 to 5 do begin randomReal := a + Random * (b - a); // Генерация случайного вещественного числа в [a, b) writeln('Случайное вещественное число ', i, ': ', randomReal:0:2); end; end.