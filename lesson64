 
 1. 
 Сортировка — это процесс упорядочивания элементов в массиве или списке согласно определённому критерию (например, по возрастанию или убыванию).

2. 
- Метод пузырька основан на принципе многократного сравнения соседних элементов и их перестановки, если они находятся в неправильном порядке. Процесс повторяется, пока весь массив не станет отсортированным.
- Метод выбора работает по принципу выбора минимального (или максимального) элемента из неотсортированной части массива и перемещения его в начало (или конец) отсортированной части.

3. 
Вложенный цикл необходим для того, чтобы сравнивать каждый элемент массива с другими элементами. В методе пузырька это позволяет проходить по всему массиву, а в методе выбора — находить минимум/максимум в оставшейся части массива.

4. 
Метод выбора требует меньше перестановок, потому что он делает одну перестановку за один проход, помещая только один элемент на правильную позицию. В отличие от пузырька, который может выполнять множество перестановок на каждом проходе.

5. 
Быстрая сортировка (Quicksort) основывается на концепции «разделяй и властвуй»: выбирается опорный элемент, массив разделяется на части, меньшие и большие относительно опорного, и сортируются рекурсивно. 
Основная идея заключается в том, чтобы добиться хорошего распределения элементов для минимизации количества операций.

6. 
Для сортировки по убыванию нужно изменять условия сравнения в алгоритмах. В методе пузырька, вместо сравнения a[i] > a[i + 1], нужно использовать a[i] < a[i + 1]. В методе выбора аналогично — нужно искать максимальные элементы.

7. 
Да, метод «быстрой сортировки» можно использовать для нечисловых данных, включая символьные строки, так как строки могут быть упорядочены по лексикографическому порядку, аналогично тому, как это делается с числами.

8. 
Скорость быстрой сортировки зависит от выбора опорного элемента и структуры самих данных.
- Лучший случай — когда массив разделяется на равные части (O(n log n)).
- Худший случай — когда массив уже отсортирован (или обратный порядок), что даёт O(n²) из-за дисбаланса при разделе.

9.
Да, быстрая сортировка может работать дольше, чем метод выбора, особенно в худшем случае, когда она даёт временную сложность O(n²). В случае отсортированных данных или если опорный элемент постоянно выбирается плохо, эффективность быстрой сортировки снижается.

 Задачи

1. 
def count_unique_numbers(array):
    sorted_array = sorted(array)
    unique_numbers = len(set(sorted_array))
    return sorted_array, unique_numbers

array = [4, 2, 3, 4, 1, 2]
sorted_array, unique_count = count_unique_numbers(array)
print(f"Sorted array: {sorted_array}, Unique numbers count: {unique_count}")


2.
def stone_sort(array):
    n = len(array)
    for i in range(n - 1):
        for j in range(0, n - i - 1):
            if array[j] > array[j + 1]:
                array[j], array[j + 1] = array[j + 1], array[j]
    return array

array = [4, 2, 3, 1]
sorted_array = stone_sort(array)
print(f"Sorted array: {sorted_array}")


3.
def optimized_bubble_sort(array):
    n = len(array)
    for i in range(n):
        swapped = False
        for j in range(0, n - i - 1):
            if array[j] > array[j + 1]:
                array[j], array[j + 1] = array[j + 1], array[j]
                swapped = True
        if not swapped:
            break
    return array

array = [64, 34, 25, 12, 22, 11, 90]
sorted_array = optimized_bubble_sort(array)
print(f"Sorted array: {sorted_array}")


4.
def sort_by_last_digit(array):
    return sorted(array, key=lambda x: x % 10)

array = [23, 45, 12, 27, 5, 85]
sorted_array = sort_by_last_digit(array)
print(f"Sorted by last digit: {sorted_array}")


5.
def sum_of_digits(n):
    return sum(int(digit) for digit in str(n))

def sort_by_digits_sum_desc(array):
    return sorted(array, key=sum_of_digits, reverse=True)

array = [23, 45, 12, 27, 5, 85]
sorted_array = sort_by_digits_sum_desc(array)
print(f"Sorted by sum of digits descending: {sorted_array}")


6.
def custom_sort(array):
    mid = len(array) // 2
    first_half = sorted(array[:mid])
    second_half = sorted(array[mid:], reverse=True)
    return first_half + second_half

array = [23, 45, 12, 27, 5, 85]
sorted_array = custom_sort(array)
print(f"Sorted array: {sorted_array}")


7.
def sort_and_find_max_repeated(array):
    sorted_array = sorted(array)
    repeated_elements = {num for num in sorted_array if array.count(num) > 1}
    return sorted_array, max(repeated_elements) if repeated_elements else None

array = [23, 45, 12, 27, 5, 85, 12, 45]
sorted_array, max_repeated = sort_and_find_max_repeated(array)
print(f"Sorted array: {sorted_array}, Max repeated: {max_repeated}")


8.
def bubble_sort_count(array):
    count = 0
    n = len(array)
    for i in range(n):
        swapped = False
        for j in range(0, n - i - 1):
            count += 1
            if array[j] > array[j + 1]:
                array[j], array[j + 1] = array[j + 1], array[j]
                swapped = True
        if not swapped:
            break
    return count

def selection_sort_count(array):
    count = 0
    n = len(array)
    for i in range(n):
        min_idx = i
        for j in range(i + 1, n):
            count += 1
            if array[j] < array[min_idx]:
                min_idx = j
        array[i], array[min_idx] = array[min_idx], array[i]
    return count

def compare_sorting_methods(array):
    bubble_count = bubble_sort_count(array.copy())
    selection_count = selection_sort_count(array.copy())
    return bubble_count, selection_count

arrays = [
    sorted([5, 2, 1, 3, 4]),  # Already sorted
    sorted([5, 4, 3, 2, 1]),  # Reverse sorted
    [3, 1, 4, 2, 5]           # Random order
    ]

for arr in arrays:
    bubble_count, selection_count = compare_sorting_methods(arr)
    print(f"Array: {arr}, Bubble sort swaps: {bubble_count}, Selection sort swaps: {selection_count}")

